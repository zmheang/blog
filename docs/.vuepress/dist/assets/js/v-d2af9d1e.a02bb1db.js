"use strict";(self.webpackChunkdocument_web_site=self.webpackChunkdocument_web_site||[]).push([[615],{9534:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-d2af9d1e",path:"/relearn/11-css/demo/11-image-fragmentation-effect-paintJs.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"relearn/11-css/demo/11-image-fragmentation-effect-paintJs.md"}},7888:(n,s,a)=>{a.r(s),a.d(s,{default:()=>w});var p=a(6252);const t={href:"https://css-tricks.com/exploring-the-css-paint-api-image-fragmentation-effect/",target:"_blank",rel:"noopener noreferrer"},e=(0,p.Uk)("图像碎片效果"),o=(0,p.Wm)("p",null,"上一篇使用了CSS遮罩(mask)和自定义属性(@property)创建了一个图像碎片效果，这次使用一个新的API：CSS Painting API来实现同样的效果。",-1),c=(0,p.Wm)("p",null,"首先我们了解一下什么是CSS Painting API:属于 CSS Houdini APIs 的一部分，允许开发人员编写JavaScript函数，这些函数会直接绘制道元素的背景、边框和内容中",-1),l=(0,p.Uk)("又牵扯出来一个新词："),u={href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/Houdini",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("CSS Houdini"),i=(0,p.Uk)(":"),k=(0,p.uE)('<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Houdini是一组底层API，它们公开了CSS引擎的的各个部分，从而使得开发人员能够通过加入浏览器渲染引擎的样式和布局过程来扩展CSS。通俗地讲就是之前都是浏览器直接一整套流程直接渲染成页面展示出来，现在浏览器提供了一组API，使得在适当的时机开发人员可以直接访问CSS对象模型(CSSOM),开发人员可以编写浏览器解析为CSS的代码从而创建新的CSS功能，而不用等待浏览器本身厂家的实现...大致先理解到这里吧，跑远了，回归正题。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>下一步：CSS Painting API怎么使用？</p><p><code>既然属于CSS Houdini APIs的一部分，那么也就是说最后还是要解析成为CSS的，只不过过程使用了非常规方案，那么就让我们来了解一下它的使用步骤：</code></p><ol><li>使用<code>registerPaint()</code>定义一个<code>paint worklet</code></li><li>注册定义的<code>worklet</code></li><li>放在<code>paint()</code>中</li></ol><p>知道了使用方法之后我们就可以在之前的基础上进行修改了：之前主要是使用scss生成了超级多的代码显得很多余，那么我们就可以使用<code>CSS paint API</code>来创建遮罩(mask).</p><p><code>html代码：</code></p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token comment">&lt;!-- n*m代表遮罩的总个数 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://z3.ax1x.com/2021/08/18/f7Uya4.png<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">--f-n</span><span class="token punctuation">:</span>100<span class="token punctuation">;</span><span class="token property">--f-m</span><span class="token punctuation">:</span>100<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>css代码：</code></p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code>// 原理同上次\n<span class="token atrule"><span class="token rule">@property</span> --f-o</span><span class="token punctuation">{</span>\n    <span class="token property">syntax</span><span class="token punctuation">:</span> <span class="token string">&#39;&lt;number&gt;&#39;</span><span class="token punctuation">;</span>\n    <span class="token property">inherits</span><span class="token punctuation">:</span> false<span class="token punctuation">;</span>\n    <span class="token property">initial-value</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token selector">img</span> <span class="token punctuation">{</span>\n    <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>\n    <span class="token property">-webkit-mask</span><span class="token punctuation">:</span> <span class="token function">paint</span><span class="token punctuation">(</span>fragmentation<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">--f-o</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span>\n    <span class="token property">transition</span><span class="token punctuation">:</span>--f-o 1s<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token selector">img:hover</span> <span class="token punctuation">{</span>\n    <span class="token property">--f-o</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><code>js代码：</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// index.html</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">CSS</span><span class="token punctuation">.</span>paintWorklet<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token constant">CSS</span><span class="token punctuation">.</span>paintWorklet<span class="token punctuation">.</span><span class="token function">addModule</span><span class="token punctuation">(</span><span class="token string">&#39;./index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n<span class="token comment">// index.js</span>\n<span class="token function">registerPaint</span><span class="token punctuation">(</span><span class="token string">&#39;fragmentation&#39;</span><span class="token punctuation">,</span> <span class="token keyword">class</span>  <span class="token punctuation">{</span>\n\t\t<span class="token comment">// inputProperties() 可以返回影响元素的所有属性，不仅仅是自定义属性</span>\n    <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">inputProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span>\n            <span class="token string">&#39;--f-n&#39;</span><span class="token punctuation">,</span>\n            <span class="token string">&#39;--f-m&#39;</span><span class="token punctuation">,</span>\n            <span class="token string">&#39;--f-o&#39;</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">paint</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> size<span class="token punctuation">,</span> properties</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token keyword">const</span> n <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;--f-n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> m <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;--f-m&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> o <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;--f-o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> w <span class="token operator">=</span> size<span class="token punctuation">.</span>width<span class="token operator">/</span>n<span class="token punctuation">;</span>\n        <span class="token keyword">const</span> h <span class="token operator">=</span> size<span class="token punctuation">.</span>height<span class="token operator">/</span>m<span class="token punctuation">;</span>\n        <span class="token keyword">const</span> l <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">const</span> mask <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> seed <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> m_w  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">123456789</span> <span class="token operator">+</span> seed<span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">;</span>\n        <span class="token keyword">let</span> m_z  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">987654321</span> <span class="token operator">-</span> seed<span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token function-variable function">random</span> <span class="token operator">=</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            m_z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">36969</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m_z <span class="token operator">&amp;</span> <span class="token number">65535</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>m_z <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">;</span>\n            m_w <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">18000</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m_w <span class="token operator">&amp;</span> <span class="token number">65535</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>m_w <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">;</span>\n\n            <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m_z <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>m_w <span class="token operator">&amp;</span> <span class="token number">65535</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>\n            result <span class="token operator">/=</span> <span class="token number">4294967296</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&#39;rgba(0,0,0,&#39;</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>o<span class="token punctuation">)</span><span class="token operator">*</span>l<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">;</span>\n                ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span>i<span class="token operator">*</span>w<span class="token punctuation">,</span> j<span class="token operator">*</span>h<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><p>整体的思路没有变化，还是利用n*m个遮罩的先后渐变实现碎片效果，不同的是代码量变少了，其实就是利用<code>houdini API我们使用js代码将之前重复的代码生成了出来</code></p>',12),b=(0,p.Uk)("关于"),m=(0,p.Wm)("code",null,"CSS painting API",-1),d=(0,p.Uk)("的具体使用方法见： "),g={href:"https://developer.mozilla.org/en-US/docs/Web/API/CSS_Painting_API/Guide",target:"_blank",rel:"noopener noreferrer"},f=(0,p.Uk)("->"),h=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数有三个参数：\n <span class="token operator">-</span> drawing context\n <span class="token operator">-</span> paint size\n <span class="token operator">-</span> properties\n\n我们还可以在<span class="token keyword">class</span>内部自定义属性\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>最后的效果和之前是一样的</p><p>接着不仅仅满足于矩形碎片，既然是碎片那大多都是三角形的，这样看起来比较有感觉：其实思路都是一样的，关键在于mask生成的算法，所以换一个生成算法即可实现不同的效果：</p><p><code>css代码：</code></p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code>// 将index.html中的index.js替换即可\n// index2.js\nimport Delaunator from <span class="token string">&#39;https://cdn.skypack.dev/delaunator@5.0.0&#39;</span><span class="token punctuation">;</span>\n\n<span class="token selector">registerPaint(&#39;fragmentation&#39;, class</span>  <span class="token punctuation">{</span>\n\n    <span class="token selector">static get inputProperties()</span> <span class="token punctuation">{</span>\n        return [\n            <span class="token string">&#39;--f-n&#39;</span><span class="token punctuation">,</span>\n            <span class="token string">&#39;--f-m&#39;</span><span class="token punctuation">,</span>\n            <span class="token string">&#39;--f-o&#39;</span>\n        ]\n    <span class="token punctuation">}</span>\n\n    <span class="token selector">paint(ctx, size, properties)</span> <span class="token punctuation">{</span>\n        const n = properties.<span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;--f-n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        const o = properties.<span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;--f-o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        const w = size.width<span class="token punctuation">;</span>\n        const h = size.height<span class="token punctuation">;</span>\n        const l = 7<span class="token punctuation">;</span>\n\n        var dots = [[0<span class="token punctuation">,</span>0]<span class="token punctuation">,</span>[0<span class="token punctuation">,</span>w]<span class="token punctuation">,</span>[h<span class="token punctuation">,</span>0]<span class="token punctuation">,</span>[w<span class="token punctuation">,</span>h]]<span class="token punctuation">;</span> <span class="token comment">/* we always include the corners */</span>\n        <span class="token comment">/* we generate N random points within the area of the element */</span>\n        for <span class="token punctuation">(</span>var i = 0<span class="token punctuation">;</span> i &lt; n<span class="token punctuation">;</span> <span class="token selector">i++)</span> <span class="token punctuation">{</span>\n            dots.<span class="token function">push</span><span class="token punctuation">(</span>[Math.<span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> * w<span class="token punctuation">,</span> Math.<span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> * h]<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">/**/</span>\n        <span class="token comment">/* We call Delaunator to generate the triangles*/</span>\n        var delaunay = Delaunator.<span class="token function">from</span><span class="token punctuation">(</span>dots<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        var triangles = delaunay.triangles<span class="token punctuation">;</span>\n        <span class="token comment">/**/</span>\n        for <span class="token punctuation">(</span>var i = 0<span class="token punctuation">;</span> i &lt; triangles.length<span class="token punctuation">;</span> <span class="token selector">i += 3)</span> <span class="token punctuation">{</span> <span class="token comment">/* we loop the triangles points */</span>\n            <span class="token comment">/* we draw the path of the triangles */</span>\n            ctx.<span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            ctx.<span class="token function">moveTo</span><span class="token punctuation">(</span>dots[triangles[i]][0]    <span class="token punctuation">,</span> dots[triangles[i]][1]<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            ctx.<span class="token function">lineTo</span><span class="token punctuation">(</span>dots[triangles[i + 1]][0]<span class="token punctuation">,</span> dots[triangles[i + 1]][1]<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            ctx.<span class="token function">lineTo</span><span class="token punctuation">(</span>dots[triangles[i + 2]][0]<span class="token punctuation">,</span> dots[triangles[i + 2]][1]<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            ctx.<span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">/**/</span>\n            var alpha = <span class="token punctuation">(</span>Math.<span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>*<span class="token punctuation">(</span>l-1<span class="token punctuation">)</span> + 1<span class="token punctuation">)</span> - <span class="token punctuation">(</span>1-o<span class="token punctuation">)</span>*l<span class="token punctuation">;</span> <span class="token comment">/* the alpha value */</span>\n            <span class="token comment">/* we fill the area of triangle with the semi-transparent color */</span>\n            ctx.fillStyle = <span class="token string">&#39;rgba(0,0,0,&#39;</span>+alpha+<span class="token string">&#39;)&#39;</span><span class="token punctuation">;</span>\n            <span class="token comment">/* we consider stroke to fight the gaps */</span>\n            ctx.strokeStyle = <span class="token string">&#39;rgba(0,0,0,&#39;</span>+alpha+<span class="token string">&#39;)&#39;</span><span class="token punctuation">;</span>\n            ctx.<span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            ctx.<span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><p>当然，还可以是🪜，⭕️，⭐️...</p>',6),w={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[(0,p.Wm)("p",null,[(0,p.Wm)("a",t,[e,(0,p.Wm)(a)])]),o,c,(0,p.Wm)("p",null,[l,(0,p.Wm)("a",u,[r,(0,p.Wm)(a)]),i]),k,(0,p.Wm)("p",null,[b,m,d,(0,p.Wm)("a",g,[f,(0,p.Wm)(a)])]),h],64)}}}}]);