"use strict";(self.webpackChunkdocument_web_site=self.webpackChunkdocument_web_site||[]).push([[460],{3302:(e,a,l)=>{l.r(a),l.d(a,{data:()=>n});const n={key:"v-69af7db6",path:"/relearn/15-browser/index/",title:"浏览器",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"浏览器相关知识",slug:"浏览器相关知识",children:[{level:3,title:"一、缓存机制",slug:"一、缓存机制",children:[]},{level:3,title:"二、本地存储",slug:"二、本地存储",children:[]}]},{level:2,title:"从输入URL到页面加载的过程",slug:"从输入url到页面加载的过程",children:[{level:3,title:"1.在浏览器中输入URL",slug:"_1-在浏览器中输入url",children:[]},{level:3,title:"2.先检查强缓存，如果命中且没有过期便直接使用，否则进入下一步",slug:"_2-先检查强缓存-如果命中且没有过期便直接使用-否则进入下一步",children:[]},{level:3,title:"3.DNS域名解析系统对输入的网址进行解析，组装称一个HTTP请求报文，并获取主机ip",slug:"_3-dns域名解析系统对输入的网址进行解析-组装称一个http请求报文-并获取主机ip",children:[]},{level:3,title:"4.建立TCP连接",slug:"_4-建立tcp连接",children:[]},{level:3,title:"5.客户端发送http请求",slug:"_5-客户端发送http请求",children:[]},{level:3,title:"6.服务端响应请求",slug:"_6-服务端响应请求",children:[]},{level:3,title:"7.浏览器解析响应请求，然后根据响应报文选择关闭连接还是保持连接，并渲染页面",slug:"_7-浏览器解析响应请求-然后根据响应报文选择关闭连接还是保持连接-并渲染页面",children:[]},{level:3,title:"8.网页加载流程",slug:"_8-网页加载流程",children:[]}]},{level:2,title:"JavaScript执行机制",slug:"javascript执行机制",children:[{level:3,title:"变量提升/ 函数提升",slug:"变量提升-函数提升",children:[]},{level:3,title:"调用栈",slug:"调用栈",children:[]},{level:3,title:"块级作用域",slug:"块级作用域",children:[]},{level:3,title:"作用域链和闭包",slug:"作用域链和闭包",children:[]},{level:3,title:"this",slug:"this",children:[]}]},{level:2,title:"V8工作原理",slug:"v8工作原理",children:[{level:3,title:"数据的存储",slug:"数据的存储",children:[]},{level:3,title:"垃圾回收",slug:"垃圾回收",children:[]},{level:3,title:"编译器/解释器",slug:"编译器-解释器",children:[]}]},{level:2,title:"渲染流程",slug:"渲染流程",children:[{level:3,title:"构建DOM树",slug:"构建dom树",children:[]},{level:3,title:"样式计算",slug:"样式计算",children:[]},{level:3,title:"布局阶段",slug:"布局阶段",children:[]},{level:3,title:"分层",slug:"分层",children:[]},{level:3,title:"图层绘制",slug:"图层绘制",children:[]},{level:3,title:"栅格化操作",slug:"栅格化操作",children:[]},{level:3,title:"合成和显示",slug:"合成和显示",children:[]}]},{level:2,title:"浏览器中的页面循环系统",slug:"浏览器中的页面循环系统",children:[{level:3,title:"消息队列和事件循环系统",slug:"消息队列和事件循环系统",children:[]},{level:3,title:"微任务和宏任务",slug:"微任务和宏任务",children:[]}]},{level:2,title:"window对象",slug:"window对象",children:[{level:3,title:"一、 概述",slug:"一、-概述",children:[]},{level:3,title:"二、 属性和方法",slug:"二、-属性和方法",children:[]},{level:3,title:"三、 事件",slug:"三、-事件",children:[]},{level:3,title:"四、 多窗口",slug:"四、-多窗口",children:[]}]},{level:2,title:"Navigator对象",slug:"navigator对象",children:[]},{level:2,title:"Screen对象",slug:"screen对象",children:[]},{level:2,title:"Cookie对象",slug:"cookie对象",children:[{level:3,title:"概述",slug:"概述",children:[]},{level:3,title:"属性",slug:"属性-1",children:[]}]},{level:2,title:"XMLHttpRequest对象",slug:"xmlhttprequest对象",children:[]},{level:2,title:"同源政策（同源限制）",slug:"同源政策-同源限制",children:[{level:3,title:"概述",slug:"概述-1",children:[]}]},{level:2,title:"Storage接口",slug:"storage接口",children:[]},{level:2,title:"History对象",slug:"history对象",children:[]},{level:2,title:"Location、URL、URLSearchParams对象",slug:"location、url、urlsearchparams对象",children:[]},{level:2,title:"File对象",slug:"file对象",children:[]},{level:2,title:"FormData对象",slug:"formdata对象",children:[]},{level:2,title:"indexedDB",slug:"indexeddb",children:[]},{level:2,title:"Web Worker",slug:"web-worker",children:[{level:3,title:"注意点：",slug:"注意点",children:[]}]},{level:2,title:"开发者工具",slug:"开发者工具",children:[]}],filePathRelative:"relearn/15-browser/index/index.md"}},9990:(e,a,l)=>{l.r(a),l.d(a,{default:()=>Ma});var n=l(6252);const r=(0,n.Wm)("h1",{id:"浏览器",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#浏览器","aria-hidden":"true"},"#"),(0,n.Uk)(" 浏览器")],-1),i={href:"https://blog.poetries.top/browser-working-principle/",target:"_blank",rel:"noopener noreferrer"},o=(0,n.Uk)("参考"),t=(0,n.uE)('<p>[TOC]</p><h2 id="浏览器相关知识" tabindex="-1"><a class="header-anchor" href="#浏览器相关知识" aria-hidden="true">#</a> 浏览器相关知识</h2><h3 id="一、缓存机制" tabindex="-1"><a class="header-anchor" href="#一、缓存机制" aria-hidden="true">#</a> 一、缓存机制</h3><ol><li><h4 id="强缓存" tabindex="-1"><a class="header-anchor" href="#强缓存" aria-hidden="true">#</a> 强缓存</h4><p>浏览器直接从本地缓存中获取数据，不与服务器进行交互，它有两种依据：<code>Expires</code> 和 <code>Cache-Control</code> 可以用来判断是否命中缓存</p><ol><li><p>Expires</p><p>即过期时间，存在于服务器返回的响应头中，即浏览器在这个过期时间之前可以直接冲缓存里面获取数据，无需再次请求</p></li><li><p>Cache-Control</p><p>在<code>HTTP1.1</code>中采用的一个非常关键的字段。我们利用Cache-Control 来控制缓存，一般情况下我们可以设置：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Cache<span class="token operator">-</span>Control<span class="token operator">:</span>max<span class="token operator">-</span>age<span class="token operator">=</span><span class="token number">3600</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>当然还可以配合其他指令一起使用：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public： 表示响应可以被客户端和代理服务器缓存；\nprivate： 表示响应只可以被客户端缓存，而代理服务器不能缓存；\nno-store： 表示不缓存任何响应。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol></li><li><h4 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存" aria-hidden="true">#</a> 协商缓存</h4><p>就是强缓存失效之后，浏览器（携带缓存标识）向服务器发起请求，由服务器（根据缓存标识）决定是否使用本地缓存的过程，主要由两种情况：</p><ol><li><p><code>Last-Modified / If-Modified-Since</code></p><ul><li><p>浏览器在第一次访问资源时，服务器返回资源的同时，在响应头中添加了<code>Last-Modified</code>，值是这个资源在服务器上的最后修改时间，浏览器接收后就会缓存文件和 header</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Last-Modified: Fri, 22 Jul 2020 01:47:00 GMT\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>当浏览器下一次请求这个资源的时候，浏览器检测到<code>Last-Modified</code>这个header， 于是添加<code>If-Modified-Since</code>这个header，值就是<code>Last-Modified</code>中的值</p></li><li><p>服务器再次收到这个资源请求，会根据<code>If-Modified-Since</code>中的值和服务器中这个资源的最后修改时间进行对比</p><p>如果没有变化，返回304和空的响应体，直接从缓存中度读取资源</p><p>如果<code>If-Modified-Since</code> 的时间小于服务器中这个资源的最后修改时间，说明文件有更新，于是返回新的资源文件和200</p></li></ul></li><li><p><code>Etag / If-None-Match</code></p><ul><li>Etag 是服务器给文件生成的唯一标识，只要里面的内容有改动，这个值就会发生变化，服务器通过响应头把这个值给浏览器</li><li>浏览器在下一次向服务器发送请求时，会将上一次返回的Etag值放到请求头中的<code>If-None-Match</code>中</li><li>服务器只需要比较客户端传来的<code>If-None-Match</code>跟自己本地的Etag是否一致即可</li></ul></li></ol></li><li><h4 id="内核" tabindex="-1"><a class="header-anchor" href="#内核" aria-hidden="true">#</a> 内核</h4><p>每种浏览器都有自己不用的内核，而内核又分为两部分：渲染引擎 和 JS引擎</p><ul><li><h5 id="渲染引擎" tabindex="-1"><a class="header-anchor" href="#渲染引擎" aria-hidden="true">#</a> 渲染引擎</h5><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>firefox使用gecko引擎\n\nIE使用Trident引擎，2015年微软推出自己新的浏览器，原名叫斯巴达，后改名edge，使用edge引擎\n\nopera最早使用Presto引擎，后来弃用\n\nchrome\\safari\\opera使用webkit引擎，13年chrome和opera开始使用Blink引擎\n\nUC使用U3引擎\n\nQQ浏览器和微信内核使用X5引擎，16年开始使用Blink引擎\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><h5 id="js引擎" tabindex="-1"><a class="header-anchor" href="#js引擎" aria-hidden="true">#</a> JS引擎</h5><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>老版本IE使用Jscript引擎，IE9之后使用Chakra引擎，edge浏览器仍然使用Chakra引擎\n\nfirefox使用monkey系列引擎\n\nsafari使用的SquirrelFish系列引擎\n\nOpera使用Carakan引擎\n\nchrome使用V8引擎。nodeJs其实就是封装了V8引擎\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="为什么会有这么多的不同" tabindex="-1"><a class="header-anchor" href="#为什么会有这么多的不同" aria-hidden="true">#</a> 为什么会有这么多的不同？</h5><p>HTML，CSS，JS这些只是一种规范，告诉浏览器遇到这种标签怎么渲染，遇到这种样式怎么渲染，遇到这种脚本怎么执行，但是具体怎么执行的时浏览器内部的事情，对于我们程序员来说是不必要知道的，对于为什么有这么多不同种类的浏览器，因为厂家不同啊，你想成立一家浏览器公司，就必须有自己的浏览器，而且还不能使用别家浏览器的代码，只能自己实现，所以实现的方法就各不相同，所以这样也就会有自己侧重点，比如这家渲染快，这家脚本执行优化的更好等等</p></li></ul></li><li><h4 id="chrome架构" tabindex="-1"><a class="header-anchor" href="#chrome架构" aria-hidden="true">#</a> chrome架构</h4><ul><li><p>进程与线程</p></li><li><p>单进程浏览器</p></li><li><h5 id="多进程浏览器" tabindex="-1"><a class="header-anchor" href="#多进程浏览器" aria-hidden="true">#</a> 多进程浏览器</h5><p>最新的Chrome浏览器包括：1个浏览器主进程，1个GPU进程，1个网络进程，多个渲染进程和多个插件</p><ul><li><h6 id="浏览器进程" tabindex="-1"><a class="header-anchor" href="#浏览器进程" aria-hidden="true">#</a> 浏览器进程</h6><p>主要负责界面的显示、用户交互、子进程管理，同时提供存储等功能</p></li><li><h6 id="渲染进程" tabindex="-1"><a class="header-anchor" href="#渲染进程" aria-hidden="true">#</a> 渲染进程</h6><p>核心任务是将HTML,CSS和JavaScript转换为用户可以与之交互的网页，处于安全考虑，渲染进程都是运行在沙箱模式</p><p>通常情况下打开一个新页面都会使用三度的渲染进程，但是如果从A页面打开B页面，且A和B 都属于同一个站点的话，那么B页面就会复用A页面的渲染进程</p></li><li><h6 id="gpu进程" tabindex="-1"><a class="header-anchor" href="#gpu进程" aria-hidden="true">#</a> GPU进程</h6><p>负责页面的UI绘制</p></li><li><h6 id="网络进程" tabindex="-1"><a class="header-anchor" href="#网络进程" aria-hidden="true">#</a> 网络进程</h6><p>主要负责网络资源的加载</p></li><li><h6 id="插件进程" tabindex="-1"><a class="header-anchor" href="#插件进程" aria-hidden="true">#</a> 插件进程</h6><p>主要负责插件的运行</p></li></ul></li><li><p>面向服务的浏览器</p></li></ul></li></ol><h3 id="二、本地存储" tabindex="-1"><a class="header-anchor" href="#二、本地存储" aria-hidden="true">#</a> 二、本地存储</h3><ol><li><h4 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> Cookie</h4><p><code>HTTP Cookie</code>是浏览器第一次发请求到服务器时，服务器返回给浏览器并保存在本地的一小块数据，然后在浏览器下次再次向同一域名发请求时都会携带的Cookie。服务器拿到Cookie进行解析，便能获取客户端的状态</p><p>缺点：</p><ul><li>容量小：不能超过4kb</li><li>安全性低</li><li>影响性能：cookie紧跟域名，只要是相同域名下，就会带上Cookie，不管域名下的地址是否需要Cookie信息</li></ul></li><li><h4 id="localstorage" tabindex="-1"><a class="header-anchor" href="#localstorage" aria-hidden="true">#</a> LocalStorage</h4><ul><li>只存在客户端</li><li>容量大：5M</li><li>接口封装</li><li>影响性能：同Cookie</li></ul></li><li><h4 id="sessionstorage" tabindex="-1"><a class="header-anchor" href="#sessionstorage" aria-hidden="true">#</a> sessionStorage</h4><ul><li>只存在客户端</li><li>容量大：5M</li><li>接口封装</li><li>会话级别</li></ul></li><li><h4 id="indexdb" tabindex="-1"><a class="header-anchor" href="#indexdb" aria-hidden="true">#</a> IndexDB</h4><p>浏览器提供的本地数据库</p></li></ol><h2 id="从输入url到页面加载的过程" tabindex="-1"><a class="header-anchor" href="#从输入url到页面加载的过程" aria-hidden="true">#</a> 从输入URL到页面加载的过程</h2><h3 id="_1-在浏览器中输入url" tabindex="-1"><a class="header-anchor" href="#_1-在浏览器中输入url" aria-hidden="true">#</a> 1.在浏览器中输入URL</h3><p>---接下来还有一步：同一域名下最多只能建立6个TCP连接，剩余的进入排队等待状态</p><h3 id="_2-先检查强缓存-如果命中且没有过期便直接使用-否则进入下一步" tabindex="-1"><a class="header-anchor" href="#_2-先检查强缓存-如果命中且没有过期便直接使用-否则进入下一步" aria-hidden="true">#</a> 2.先检查强缓存，如果命中且没有过期便直接使用，否则进入下一步</h3><h3 id="_3-dns域名解析系统对输入的网址进行解析-组装称一个http请求报文-并获取主机ip" tabindex="-1"><a class="header-anchor" href="#_3-dns域名解析系统对输入的网址进行解析-组装称一个http请求报文-并获取主机ip" aria-hidden="true">#</a> 3.DNS域名解析系统对输入的网址进行解析，组装称一个HTTP请求报文，并获取主机ip</h3><h4 id="浏览器缓存-本地缓存-系统hosts-路由器-本地域名服务器-根服务器-顶级服务器" tabindex="-1"><a class="header-anchor" href="#浏览器缓存-本地缓存-系统hosts-路由器-本地域名服务器-根服务器-顶级服务器" aria-hidden="true">#</a> 浏览器缓存 -&gt; 本地缓存 -&gt; 系统hosts -&gt; 路由器 -&gt; 本地域名服务器 -&gt; 根服务器 -&gt; 顶级服务器</h4><h3 id="_4-建立tcp连接" tabindex="-1"><a class="header-anchor" href="#_4-建立tcp连接" aria-hidden="true">#</a> 4.建立TCP连接</h3><h4 id="三次握手" tabindex="-1"><a class="header-anchor" href="#三次握手" aria-hidden="true">#</a> 三次握手</h4><ul><li>客户端发送一个TCP的SYN = 1, Seq = X的包到服务器的端口</li><li>服务器返回SYN = 1,ACK = X + 1，Seq = Y的响应包</li><li>客户端发送ACK = Y + 1,Seq = Z</li></ul><h3 id="_5-客户端发送http请求" tabindex="-1"><a class="header-anchor" href="#_5-客户端发送http请求" aria-hidden="true">#</a> 5.客户端发送http请求</h3><p>​ 正常完成一次请求，连接便会断开，但是当请求头中加入了这样的信息时，该连接将一直保持打开状态</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\tConnection:Keep-Alive \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_6-服务端响应请求" tabindex="-1"><a class="header-anchor" href="#_6-服务端响应请求" aria-hidden="true">#</a> 6.服务端响应请求</h3><p>​ 重定向：当响应码位301时，响应头中会有一个属性<code>Location</code>，接下来浏览器就会获取该字段中的地址，并使用该地址进行重新导航</p><h3 id="_7-浏览器解析响应请求-然后根据响应报文选择关闭连接还是保持连接-并渲染页面" tabindex="-1"><a class="header-anchor" href="#_7-浏览器解析响应请求-然后根据响应报文选择关闭连接还是保持连接-并渲染页面" aria-hidden="true">#</a> 7.浏览器解析响应请求，然后根据响应报文选择关闭连接还是保持连接，并渲染页面</h3><p>​ 渲染流程见下面</p><h3 id="_8-网页加载流程" tabindex="-1"><a class="header-anchor" href="#_8-网页加载流程" aria-hidden="true">#</a> 8.网页加载流程</h3><ol><li>浏览器一边下载HTML网页，一边开始解析，不是等到下载完再开始解析</li><li>解析过程中，浏览器发现<code>&lt;script&gt;</code>元素,就暂停解析，把网页渲染的控制权转交给<code>JavaScript</code>引擎（如果script中有defer属性，就会并行下载资源，但是浏览器完成解析HTML王爷之后，再执行已经下载完成的脚本---如果有async属性，也会并行下载资源，但是当脚本下载完成后，浏览器暂停解析HTML网页，开始执行下载完的脚本，脚本执行完之后再恢复解析HTML）</li><li>如果<code>&lt;script&gt;</code>元素引用了外部脚本，就下载该脚本再执行，否则就直接执行代码</li><li><code>JavaScript</code>引擎执行完毕，控制权交还渲染引擎，恢复往下解析HTML网页</li></ol><h6 id="关于页面渲染时的情况说明" tabindex="-1"><a class="header-anchor" href="#关于页面渲染时的情况说明" aria-hidden="true">#</a> 关于页面渲染时的情况说明：</h6><ul><li>尽量将脚本放在页面底部，或者将js代码放在DOM结构生成之后触发的事件中调用</li><li>遇到多个<code>&lt;script&gt;</code>标签，浏览器会并行下载资源，但是执行顺序是按照页面中出现的顺序决定的</li></ul><h2 id="javascript执行机制" tabindex="-1"><a class="header-anchor" href="#javascript执行机制" aria-hidden="true">#</a> JavaScript执行机制</h2><h3 id="变量提升-函数提升" tabindex="-1"><a class="header-anchor" href="#变量提升-函数提升" aria-hidden="true">#</a> 变量提升/ 函数提升</h3><p>浏览器运行一段JS代码，会先编译，再运行</p><ul><li><h4 id="编译阶段" tabindex="-1"><a class="header-anchor" href="#编译阶段" aria-hidden="true">#</a> 编译阶段</h4><p>通过编译阶段，会生成两部分内容：执行上下文和可执行代码</p><p>代码一行行执行，遇到变量声明或者函数声明就会在执行上下文中创建对应的属性并初始化值，最后将声明以外的代码编译成字节码作为可执行代码</p></li><li><h4 id="执行阶段" tabindex="-1"><a class="header-anchor" href="#执行阶段" aria-hidden="true">#</a> 执行阶段</h4><p>运行可执行代码，一行行执行</p></li></ul><h3 id="调用栈" tabindex="-1"><a class="header-anchor" href="#调用栈" aria-hidden="true">#</a> 调用栈</h3><ul><li>每调用一个函数，JavaScript引擎会为其创建执行上下文，并把该执行上下文压入调用栈，期间再次调用其他函数同样会创建执行上下文，并压入调用栈，在函数执行结束后，将其执行上下文从调用栈中弹出</li></ul><h3 id="块级作用域" tabindex="-1"><a class="header-anchor" href="#块级作用域" aria-hidden="true">#</a> 块级作用域</h3><h3 id="作用域链和闭包" tabindex="-1"><a class="header-anchor" href="#作用域链和闭包" aria-hidden="true">#</a> 作用域链和闭包</h3><p>​ 在JavaScript中，根据词法作用域的规则，内部函数总是可以访问外部函数中声明的变量，当通过调用一个外部函数返回一个内部函数后，及时该外部函数已经执行结束了，但是内部函数引用外部函数的变量依然保存在内存中，我们就把这些变量的集合成为闭包</p><p>​ 跟着代码来分析一遍闭包：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> myName <span class="token operator">=</span> <span class="token string">&quot; zmheang &quot;</span>\n    <span class="token keyword">let</span> test1 <span class="token operator">=</span> <span class="token number">1</span>\n    <span class="token keyword">const</span> test2 <span class="token operator">=</span> <span class="token number">2</span>\n    <span class="token keyword">var</span> innerBar <span class="token operator">=</span> <span class="token punctuation">{</span> \n        <span class="token function-variable function">setName</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newName</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            myName <span class="token operator">=</span> newName\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">getName</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span>\n            <span class="token keyword">return</span> myName\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> innerBar\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nbar<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot; lily &quot;</span><span class="token punctuation">)</span>\nbar<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ul><li>当JavaScript引擎执行到<code>foo</code>函数是，首先会编译，并创建一个空执行上下文</li><li>在编译的过程中，遇到内部函数<code>setName</code>，JavaScript引擎还要对内部函数做一次快速的词法扫描，发现该内部函数引用了<code>foo</code>函数中的<code>myName</code>变量，由于是内部函数引用了外部函数变量，所以JavaScript引擎判断这是一个闭包，于是在堆空间创建一个<code>closure(foo)</code>的对象，用来保存<code>myName</code>变量</li><li>接着继续扫描到<code>getName</code>方法时，发现该函数内部还引用变量<code>test1</code>，于是<code>JavaScript</code>引擎又将<code>test1</code>添加到<code>closure(foo)</code>对象中，这时候堆中的<code>closure(foo)</code>对象中就包含了<code>myName</code>和<code>test1</code>两个变量了</li><li>由于<code>test2</code>并没有被内部函数引用，所以<code>test2</code>依然保存在调用栈中</li></ul><p>也就是说闭包的核心有两点：</p><ol><li>预扫描内部函数</li><li>把内部函数引用的外部变量保存到堆中</li></ol><h3 id="this" tabindex="-1"><a class="header-anchor" href="#this" aria-hidden="true">#</a> this</h3><p>首先要确定的一点是：<code>this</code> 和 作用域链之间没有任何的关系！！！</p><p><code>this</code> 是和执行上下文相关联的，每个执行上下文都对应了一个<code>this</code>，比如全局上下文中的<code>this</code>指的是<code>window</code>对象，函数执行上下文中的<code>this</code>指的是调用此函数时的对象，当然我们也可以将执行上下文中<code>this</code>指向其他对象，一般是通过<code>call</code>函数，还可以使用<code>new</code>来创建</p><h5 id="当执行new-xxx-时-javascript做了什么" tabindex="-1"><a class="header-anchor" href="#当执行new-xxx-时-javascript做了什么" aria-hidden="true">#</a> 当执行<code>new xxx（）</code>时，JavaScript做了什么：</h5><ol><li>首先创建一个空对象tempObj</li><li>接着调用<code>xxx.call（）</code>方法，并将tempObj作为<code>call</code>的参数，这样当<code>xxx</code>的执行上下文创建时，它的<code>this</code>就指向了<code>tempObj</code>对象</li><li>然后执行<code>xxx</code>函数，此时的<code>xxx</code>函数执行上下文中的<code>this</code>指向了<code>tempObj</code>对象</li><li>最后返回<code>tempObj</code>对象</li></ol><h5 id="this的相关坑" tabindex="-1"><a class="header-anchor" href="#this的相关坑" aria-hidden="true">#</a> this的相关坑</h5><ol><li><h6 id="嵌套函数中的this不会从外层函数中继承" tabindex="-1"><a class="header-anchor" href="#嵌套函数中的this不会从外层函数中继承" aria-hidden="true">#</a> 嵌套函数中的<code>this</code>不会从外层函数中继承</h6><p>解决方法：在外层函数中使用变量将this缓存起来或者使用箭头函数</p></li><li><h6 id="普通函数中的this默认指向全局对象window" tabindex="-1"><a class="header-anchor" href="#普通函数中的this默认指向全局对象window" aria-hidden="true">#</a> 普通函数中的<code>this</code>默认指向全局对象<code>window</code></h6><p>通过<code>call</code>来规定<code>this</code>的指向</p></li></ol><h2 id="v8工作原理" tabindex="-1"><a class="header-anchor" href="#v8工作原理" aria-hidden="true">#</a> V8工作原理</h2><h3 id="数据的存储" tabindex="-1"><a class="header-anchor" href="#数据的存储" aria-hidden="true">#</a> 数据的存储</h3><p>调用栈</p><p>堆</p><h3 id="垃圾回收" tabindex="-1"><a class="header-anchor" href="#垃圾回收" aria-hidden="true">#</a> 垃圾回收</h3><p>调用栈：ESP，</p><p>堆：</p><p>​ 新生代：复制算法</p><p>​ 老生代：标记清除</p><h3 id="编译器-解释器" tabindex="-1"><a class="header-anchor" href="#编译器-解释器" aria-hidden="true">#</a> 编译器/解释器</h3><p>。。。。</p><h2 id="渲染流程" tabindex="-1"><a class="header-anchor" href="#渲染流程" aria-hidden="true">#</a> 渲染流程</h2><p>名词：</p><p>DOM树：</p><p>CSSOM树：</p><p>Render树：</p><p>重绘（repaint）：没有改变元素的几何信息</p><p>重排（reflow）：修改了元素的几何信息</p><p>视口（ViewPort）：一个页面中用户能够看到的部分</p><p>层叠上下文：满足下列任意一个条件形成</p>',67),d=(0,n.Wm)("li",null,[(0,n.Wm)("p",null,[(0,n.Uk)("文档根元素（"),(0,n.Wm)("code",null,"<html>"),(0,n.Uk)("）；")])],-1),s={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/position",target:"_blank",rel:"noopener noreferrer"},c=(0,n.Wm)("code",null,"position",-1),h=(0,n.Uk)(" 值为 "),p=(0,n.Wm)("code",null,"absolute",-1),u=(0,n.Uk)("（绝对定位）或 "),m=(0,n.Wm)("code",null,"relative",-1),b=(0,n.Uk)("（相对定位）且 "),f={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/z-index",target:"_blank",rel:"noopener noreferrer"},g=(0,n.Wm)("code",null,"z-index",-1),k=(0,n.Uk)(" 值不为 "),x=(0,n.Wm)("code",null,"auto",-1),W=(0,n.Uk)(" 的元素；"),v={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/position",target:"_blank",rel:"noopener noreferrer"},w=(0,n.Wm)("code",null,"position",-1),S=(0,n.Uk)(" 值为 "),C=(0,n.Wm)("code",null,"fixed",-1),U=(0,n.Uk)("（固定定位）或 "),_=(0,n.Wm)("code",null,"sticky",-1),y=(0,n.Uk)("（粘滞定位）的元素（沾滞定位适配所有移动设备上的浏览器，但老的桌面浏览器不支持）；"),z=(0,n.Uk)("flex ("),N={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/flexbox",target:"_blank",rel:"noopener noreferrer"},M=(0,n.Wm)("code",null,"flexbox",-1),j=(0,n.Uk)(") 容器的子元素，且 "),T={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/z-index",target:"_blank",rel:"noopener noreferrer"},L=(0,n.Wm)("code",null,"z-index",-1),O=(0,n.Uk)(" 值不为 "),E=(0,n.Wm)("code",null,"auto",-1),J=(0,n.Uk)("；"),P=(0,n.Uk)("grid ("),D={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid",target:"_blank",rel:"noopener noreferrer"},H=(0,n.Wm)("code",null,"grid",-1),B=(0,n.Uk)(") 容器的子元素，且 "),I={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/z-index",target:"_blank",rel:"noopener noreferrer"},A=(0,n.Wm)("code",null,"z-index",-1),q=(0,n.Uk)(" 值不为 "),R=(0,n.Wm)("code",null,"auto",-1),F=(0,n.Uk)("；"),X={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/opacity",target:"_blank",rel:"noopener noreferrer"},V=(0,n.Wm)("code",null,"opacity",-1),Y=(0,n.Uk)(" 属性值小于 "),Q=(0,n.Wm)("code",null,"1",-1),G=(0,n.Uk)(" 的元素（参见 "),K={href:"http://www.w3.org/TR/css3-color/#transparency",target:"_blank",rel:"noopener noreferrer"},Z=(0,n.Uk)("the specification for opacity"),$=(0,n.Uk)("）；"),ee={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/mix-blend-mode",target:"_blank",rel:"noopener noreferrer"},ae=(0,n.Wm)("code",null,"mix-blend-mode",-1),le=(0,n.Uk)(" 属性值不为 "),ne=(0,n.Wm)("code",null,"normal",-1),re=(0,n.Uk)(" 的元素；"),ie=(0,n.Wm)("li",null,[(0,n.Wm)("p",null,"以下任意属性值不为"),(0,n.Wm)("div",{class:"language-text ext-text line-numbers-mode"},[(0,n.Wm)("pre",{class:"language-text"},[(0,n.Wm)("code",null,"none\n")]),(0,n.Wm)("div",{class:"line-numbers"},[(0,n.Wm)("span",{class:"line-number"},"1"),(0,n.Wm)("br")])])],-1),oe=(0,n.Wm)("p",null,"的元素：",-1),te={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform",target:"_blank",rel:"noopener noreferrer"},de=(0,n.Wm)("code",null,"transform",-1),se={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter",target:"_blank",rel:"noopener noreferrer"},ce=(0,n.Wm)("code",null,"filter",-1),he={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/perspective",target:"_blank",rel:"noopener noreferrer"},pe=(0,n.Wm)("code",null,"perspective",-1),ue={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/clip-path",target:"_blank",rel:"noopener noreferrer"},me=(0,n.Wm)("code",null,"clip-path",-1),be={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/mask",target:"_blank",rel:"noopener noreferrer"},fe=(0,n.Wm)("code",null,"mask",-1),ge=(0,n.Uk)(" / "),ke={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/mask-image",target:"_blank",rel:"noopener noreferrer"},xe=(0,n.Wm)("code",null,"mask-image",-1),We=(0,n.Uk)(" / "),ve={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/mask-border",target:"_blank",rel:"noopener noreferrer"},we=(0,n.Wm)("code",null,"mask-border",-1),Se={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/isolation",target:"_blank",rel:"noopener noreferrer"},Ce=(0,n.Wm)("code",null,"isolation",-1),Ue=(0,n.Uk)(" 属性值为 "),_e=(0,n.Wm)("code",null,"isolate",-1),ye=(0,n.Uk)(" 的元素；"),ze={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/-webkit-overflow-scrolling",target:"_blank",rel:"noopener noreferrer"},Ne=(0,n.Wm)("code",null,"-webkit-overflow-scrolling",-1),Me=(0,n.Uk)(" 属性值为 "),je=(0,n.Wm)("code",null,"touch",-1),Te=(0,n.Uk)(" 的元素；"),Le={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/will-change",target:"_blank",rel:"noopener noreferrer"},Oe=(0,n.Wm)("code",null,"will-change",-1),Ee=(0,n.Uk)(" 值设定了任一属性而该属性在 non-initial 值时会创建层叠上下文的元素（参考"),Je={href:"http://dev.opera.com/articles/css-will-change-property/",target:"_blank",rel:"noopener noreferrer"},Pe=(0,n.Uk)("这篇文章"),De=(0,n.Uk)("）；"),He={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/contain",target:"_blank",rel:"noopener noreferrer"},Be=(0,n.Wm)("code",null,"contain",-1),Ie=(0,n.Uk)(" 属性值为 "),Ae=(0,n.Wm)("code",null,"layout",-1),qe=(0,n.Uk)("、"),Re=(0,n.Wm)("code",null,"paint",-1),Fe=(0,n.Uk)(" 或包含它们其中之一的合成值（比如 "),Xe=(0,n.Wm)("code",null,"contain: strict",-1),Ve=(0,n.Uk)("、"),Ye=(0,n.Wm)("code",null,"contain: content",-1),Qe=(0,n.Uk)("）的元素。"),Ge=(0,n.uE)('<h3 id="构建dom树" tabindex="-1"><a class="header-anchor" href="#构建dom树" aria-hidden="true">#</a> 构建DOM树</h3><h3 id="样式计算" tabindex="-1"><a class="header-anchor" href="#样式计算" aria-hidden="true">#</a> 样式计算</h3><ol><li><h5 id="将css转换为浏览器能够理解的结构" tabindex="-1"><a class="header-anchor" href="#将css转换为浏览器能够理解的结构" aria-hidden="true">#</a> 将CSS转换为浏览器能够理解的结构</h5></li><li><h5 id="转换样式表中的属性值-使其标准化" tabindex="-1"><a class="header-anchor" href="#转换样式表中的属性值-使其标准化" aria-hidden="true">#</a> 转换样式表中的属性值，使其标准化</h5></li><li><h5 id="计算出dom树中每个节点的具体样式" tabindex="-1"><a class="header-anchor" href="#计算出dom树中每个节点的具体样式" aria-hidden="true">#</a> 计算出DOM树中每个节点的具体样式</h5></li></ol><h3 id="布局阶段" tabindex="-1"><a class="header-anchor" href="#布局阶段" aria-hidden="true">#</a> 布局阶段</h3><ol><li><h5 id="创建布局" tabindex="-1"><a class="header-anchor" href="#创建布局" aria-hidden="true">#</a> 创建布局</h5></li><li><h5 id="布局计算" tabindex="-1"><a class="header-anchor" href="#布局计算" aria-hidden="true">#</a> 布局计算</h5></li></ol><h3 id="分层" tabindex="-1"><a class="header-anchor" href="#分层" aria-hidden="true">#</a> 分层</h3><h4 id="满足哪些条件。渲染引擎才会为特定的节点创建新的图层" tabindex="-1"><a class="header-anchor" href="#满足哪些条件。渲染引擎才会为特定的节点创建新的图层" aria-hidden="true">#</a> 满足哪些条件。渲染引擎才会为特定的节点创建新的图层？</h4><ol><li><h5 id="拥有层叠上下文属性的元素会被提升为单独的一层" tabindex="-1"><a class="header-anchor" href="#拥有层叠上下文属性的元素会被提升为单独的一层" aria-hidden="true">#</a> 拥有层叠上下文属性的元素会被提升为单独的一层</h5></li><li><h5 id="需要裁剪的地方会被创建为图层-什么是裁剪" tabindex="-1"><a class="header-anchor" href="#需要裁剪的地方会被创建为图层-什么是裁剪" aria-hidden="true">#</a> 需要裁剪的地方会被创建为图层-----------什么是裁剪？</h5></li></ol><h3 id="图层绘制" tabindex="-1"><a class="header-anchor" href="#图层绘制" aria-hidden="true">#</a> 图层绘制</h3><p>完成图层树之后，渲染引擎将一个个图层的绘制拆分为许多个小的绘制指令，组成一个绘制列表</p><h3 id="栅格化操作" tabindex="-1"><a class="header-anchor" href="#栅格化操作" aria-hidden="true">#</a> 栅格化操作</h3><p>渲染主线程拆分成一个个绘制列表之后，commit给合成线程，合成线程会将图层划分为图块（tile），合成线程会将视口附近的图块优先生成位图。渲染进程维护了一个栅格化的线程池，所有的图块栅格化都是在线程池内进行的，栅格化的过程往往会使用GPU进行加速，生成的位图保存在GPU内存中</p><h3 id="合成和显示" tabindex="-1"><a class="header-anchor" href="#合成和显示" aria-hidden="true">#</a> 合成和显示</h3><p>等到所有图块都被光栅化之后，合成线程就会生成一个绘制图块的命令---&#39;DrawQuad&#39;，将命令提交给浏览器进程，进程中有个viz组件，用来接收DrawQuad命令，将其页面内容绘制在内存中，最后再将内存显示在屏幕上</p><h2 id="浏览器中的页面循环系统" tabindex="-1"><a class="header-anchor" href="#浏览器中的页面循环系统" aria-hidden="true">#</a> 浏览器中的页面循环系统</h2><p>上面我们提到了渲染进程，合成线程等等，这之间是怎样的配合运行的？</p><h3 id="消息队列和事件循环系统" tabindex="-1"><a class="header-anchor" href="#消息队列和事件循环系统" aria-hidden="true">#</a> 消息队列和事件循环系统</h3><p>主线程循环从消息队列中取任务执行，其他线程不断往消息队列中添加任务</p><p>但是这样又存在消息队列中的任务优先级问题以及单个任务执行时间过长的问题</p><h3 id="微任务和宏任务" tabindex="-1"><a class="header-anchor" href="#微任务和宏任务" aria-hidden="true">#</a> 微任务和宏任务</h3><p>我们把消息队列中的任务称为宏任务，每个宏任务都包含了一个微任务队列，在执行宏任务的过程中，如果DOM有变化，那么就将改变化添加到微任务队列中，这样就不会影响到宏任务的继续执行，等宏任务的主要功能都直接完成之后，这时候再执行当前宏任务中的微任务</p><p>macrotask:</p><ul><li>setTimeout</li><li>setInerVal</li><li>setImmediate</li><li>requestAnimationFrame</li><li>I/O</li><li>UI rendering</li></ul><p>microtask:</p><ul><li>process.nextTick</li><li>Promise.then()</li><li>Object.observe</li><li>MutationObserver</li></ul><p>。。。</p><h2 id="window对象" tabindex="-1"><a class="header-anchor" href="#window对象" aria-hidden="true">#</a> window对象</h2><h3 id="一、-概述" tabindex="-1"><a class="header-anchor" href="#一、-概述" aria-hidden="true">#</a> 一、 概述</h3><p>​ 在浏览器中，<code>window</code>对象就是指当前的浏览器窗口，也是当前页面的顶层对象，所有其他对象就是它的下属。一个变量如果未声明那么默认就是顶层对象的属性</p><h3 id="二、-属性和方法" tabindex="-1"><a class="header-anchor" href="#二、-属性和方法" aria-hidden="true">#</a> 二、 属性和方法</h3><ul><li><h4 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h4><ul><li><p>window.name： 一个字符串，表示当前浏览器的名字</p></li><li><p>window.closed： 布尔值，表示窗口是否关闭</p></li><li><p>window.opener：表示打开当前窗口的父窗口</p></li><li><p>window.self、window.window：都指向窗口本身</p></li><li><p>window.frames：返回一个类似数组的对象，成员为页面内所有框架窗口</p></li><li><p>window.length：返回当前网页包括的框架总数</p></li><li><p>window.frameElement：主要用于当前窗口嵌在另一个网页的情况，返回当前窗口所在的那个元素节点</p></li><li><p>window.top、window.parent：</p></li><li><p>window.status：用于读写浏览器状态栏的文本</p></li><li><p>window.devicePixelRatio：返回一个数值，表示一个CSS像素和一个物理像素大小之间的比率</p></li><li><h6 id="位置属性" tabindex="-1"><a class="header-anchor" href="#位置属性" aria-hidden="true">#</a> 位置属性</h6><ul><li>window.screenX\\Y：返回浏览器窗口左上角相对于屏幕左上角的水平距离和垂直距离</li><li>window.innerHeight\\innerWidth：返回网页在当前窗口中可见部分的高度和宽度（视口）</li><li>window.outerHeight\\outerWidth：返回浏览器窗口的高度和宽度，包括浏览器菜单和边框</li><li>window.scrollX\\scrollY：返回页面的水平滚动距离</li><li>window.pageXOffset\\pageYOffset：同上</li></ul></li><li><h6 id="组件属性" tabindex="-1"><a class="header-anchor" href="#组件属性" aria-hidden="true">#</a> 组件属性</h6><ul><li>window.locationbar： 地址栏对象</li><li>window.menubar：菜单栏对象</li><li>window.scrollbars：窗口的滚动条对象</li><li>window.toolbar：工具栏对象</li><li>window.statusbar：状态栏对象</li><li>window.personalbar：用户安装的个人工具栏对象</li></ul></li><li><h6 id="全局对象" tabindex="-1"><a class="header-anchor" href="#全局对象" aria-hidden="true">#</a> 全局对象</h6><ul><li>window.document：指向document对象</li><li>window.location：指向location对象</li><li>window.navigator：指向navigator对象</li><li>window.01-history：指向history对象</li><li>window.localStorage：指向本地存储的localStorage数据</li><li>window.sessionStorage：指向本地存储的sessionStorage数据</li><li>window.console：指向console对象</li><li>window.screen：指向screen对象</li></ul></li><li><p>window.isSecureContext：布尔值，表示当前窗口是否处在加密环境（https）中</p></li></ul></li><li><h4 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h4><ul><li>window.alert()：弹出对话框（参数只能是字符串）</li><li>window.prompt()：可交互的对话框，返回用户输入的信息</li><li>window.confirm()：只有确定和取消的对话框，返回布尔值</li><li>window.open()：新建一个浏览器窗口</li><li>window.close()：用于关闭当前窗口</li><li>window.stop()：等同于点击浏览器的停止按钮</li><li>window.moveTo()：用于移动浏览器窗口到指定位置</li><li>window.moveBy()：移动到一个相对位置</li><li>window.resizeTo()：用于缩放窗口到指定大小</li><li>window.resizeBy()：用于缩放窗口相对大小</li><li>window.scrollTo()\\scroll()\\scrollBy()：将文档滚动到指定位置</li><li>window.print()：跳出打印对话框</li><li>window.focus()\\blur()：激活窗口或者将焦点从窗口移除</li><li>window.getSelection()：返回一个Selection对象，表示用户现在选中的文本</li><li>window.getComputedStyle()：接收一个元素作为参数，返回一个包含该元素的最终样式信息的对象</li><li>window.matchMedia()：用来检查CSS的mediaQuery语句</li><li>window.requestAnimationFrame()：也是推迟某个函数的执行</li><li>window.requestldleCallback()：也是推迟某个函数的执行</li></ul></li></ul><h3 id="三、-事件" tabindex="-1"><a class="header-anchor" href="#三、-事件" aria-hidden="true">#</a> 三、 事件</h3><ul><li>load事件和onload属性：文档在浏览器窗口加载完毕时</li><li>error事件和onerror属性：浏览器脚本发生错误时</li><li>window对象的事件监听属性</li></ul><h3 id="四、-多窗口" tabindex="-1"><a class="header-anchor" href="#四、-多窗口" aria-hidden="true">#</a> 四、 多窗口</h3>',34),Ke=(0,n.Uk)("。。。"),Ze={href:"https://wangdoc.com/javascript/bom/window.html#%E6%A6%82%E8%BF%B0",target:"_blank",rel:"noopener noreferrer"},$e=(0,n.Uk)("浏览器多窗口相关"),ea=(0,n.Wm)("h2",{id:"navigator对象",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#navigator对象","aria-hidden":"true"},"#"),(0,n.Uk)(" Navigator对象")],-1),aa={href:"https://wangdoc.com/javascript/bom/navigator.html",target:"_blank",rel:"noopener noreferrer"},la=(0,n.Uk)("Navigator对象"),na=(0,n.Wm)("h2",{id:"screen对象",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#screen对象","aria-hidden":"true"},"#"),(0,n.Uk)(" Screen对象")],-1),ra={href:"https://wangdoc.com/javascript/bom/navigator.html#screen-%E5%AF%B9%E8%B1%A1",target:"_blank",rel:"noopener noreferrer"},ia=(0,n.Uk)("screen对象"),oa=(0,n.uE)('<h2 id="cookie对象" tabindex="-1"><a class="header-anchor" href="#cookie对象" aria-hidden="true">#</a> Cookie对象</h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><p>Cookie是服务器保存在浏览器中的一小段文本信息，一般大小不能超过4KB，浏览器每次向服务器发出请求都会携带这段信息，服务器如果希望在浏览器保存Cookie，就要在HTTP回应的头信息里面放置一个<code>Set-Cookie</code>字段，服务器如果想修改一个之前设置的<code>Cookie</code>值，必须同时满足四个条件：<code>Cookie</code>的key，domain，path 和 secure都匹配</p><h3 id="属性-1" tabindex="-1"><a class="header-anchor" href="#属性-1" aria-hidden="true">#</a> 属性</h3><ul><li><h4 id="expires" tabindex="-1"><a class="header-anchor" href="#expires" aria-hidden="true">#</a> Expires</h4><p>指定一个具体的到期时间，到了指定时间以后，浏览器就不再保存这个Cookie，它的值是UTC格式，可以使用<code>Date.prototytpe.toUTCString()</code>，不设置该值，默认当前会话有效</p></li><li><h4 id="max-age" tabindex="-1"><a class="header-anchor" href="#max-age" aria-hidden="true">#</a> Max-Age</h4><p>从现在开始Cookie的存在秒数，优先</p></li><li><h4 id="domain" tabindex="-1"><a class="header-anchor" href="#domain" aria-hidden="true">#</a> Domain</h4><p>指定浏览器发出HTTP请求时，哪些域名药附带这个Cookie，如果没有该值，默认将其设为当前域名</p></li><li><h4 id="path" tabindex="-1"><a class="header-anchor" href="#path" aria-hidden="true">#</a> Path</h4><p>指定浏览器发出HTTP请求时，哪些路径药附带这个Cookie</p></li><li><h4 id="secure" tabindex="-1"><a class="header-anchor" href="#secure" aria-hidden="true">#</a> Secure</h4><p>指定浏览器只有在加密协议下才能将Cookie发送到服务器</p></li><li><h4 id="httponly" tabindex="-1"><a class="header-anchor" href="#httponly" aria-hidden="true">#</a> HttpOnly</h4><p>指定该Cookie无法通过JavaScript脚本拿到</p></li><li><h4 id="samesite" tabindex="-1"><a class="header-anchor" href="#samesite" aria-hidden="true">#</a> SameSite</h4><p>Chrome51开始新增的属性用来防止CSRF攻击和用户追踪</p><ul><li>Strict</li><li>Lax</li><li>None</li></ul></li></ul><h2 id="xmlhttprequest对象" tabindex="-1"><a class="header-anchor" href="#xmlhttprequest对象" aria-hidden="true">#</a> XMLHttpRequest对象</h2>',6),ta={href:"https://wangdoc.com/javascript/bom/xmlhttprequest.html",target:"_blank",rel:"noopener noreferrer"},da=(0,n.Uk)("XHR对象"),sa=(0,n.uE)('<h2 id="同源政策-同源限制" tabindex="-1"><a class="header-anchor" href="#同源政策-同源限制" aria-hidden="true">#</a> 同源政策（同源限制）</h2><h3 id="概述-1" tabindex="-1"><a class="header-anchor" href="#概述-1" aria-hidden="true">#</a> 概述</h3><p>最初的含义是指：A网页设置的<code>Cookie</code>，B网页不能打开，除非这两个网页‘同源’，即协议相同，域名相同，端口相同（但是浏览器没有遵守这条）</p><p>目前如果非同源，共有三种行为受到限制</p><ol><li>无法读取非同源网页的Cookie、LocalStorage 和 IndexedDB</li><li>无法接触非同源网页的DOM</li><li>无法向非同源地址发送Ajax请求（可以发，但是浏览器会拒绝接受响应）</li></ol><p>对于完全不同源的网站，目前有两种方法可以解决窗口的通信问题：</p><ol><li><h6 id="片段识别符" tabindex="-1"><a class="header-anchor" href="#片段识别符" aria-hidden="true">#</a> 片段识别符</h6><p>片段标识符是指URl的#号后面的部分，只是改变片段标识符，页面不会重新刷新，这样我们就可以将父窗口要传递的信息，写入iframe窗口的片段标识符，子窗口通过监听hashchange()事件得到通知</p></li><li><h6 id="跨文档通信api" tabindex="-1"><a class="header-anchor" href="#跨文档通信api" aria-hidden="true">#</a> 跨文档通信API</h6><p>window.postMessage()：</p></li></ol><p>关于Ajax请求，只能发送给同源地址，否则就报错，有三种方法规避这个限制：</p>',8),ca=(0,n.uE)('<li><h6 id="jsonp" tabindex="-1"><a class="header-anchor" href="#jsonp" aria-hidden="true">#</a> JSONP</h6><ol><li><p>网页添加一个<code>&lt;script&gt;</code>元素，向服务器请求一个脚本。这是不受同源政策的限制的</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;script src=&quot;http://api.foo.com?callback=bar&quot;&gt;&lt;/script&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>注意，请求的脚本网址有一个callback参数，用来告诉服务器，客户端的回调函数是bar</p></li><li><p>服务器收到请求后，拼接一个字符串，将JSON数据放在函数名里面，作为字符串返回</p></li><li><p>客户端会将服务器返回的字符串作为代码解析，这时，只要客户端定义了bar()函数，就能在该函数体内拿到服务器返回的JSON数据</p></li></ol></li><li><h6 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket" aria-hidden="true">#</a> WebSocket</h6><p>一种不实行同源政策的通信协议</p></li>',2),ha=(0,n.Wm)("h6",{id:"cors",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#cors","aria-hidden":"true"},"#"),(0,n.Uk)(" CORS")],-1),pa={href:"https://wangdoc.com/javascript/bom/cors.html",target:"_blank",rel:"noopener noreferrer"},ua=(0,n.Uk)("cors相关"),ma=(0,n.uE)('<h2 id="storage接口" tabindex="-1"><a class="header-anchor" href="#storage接口" aria-hidden="true">#</a> Storage接口</h2><p>sessionStorage和localStorage实现了Storage接口</p><p>sessionStorage： 保存的数据是会话级别的</p><p>localStorage：可长期存储，下次访问该网页也可以读取</p><h4 id="属性-2" tabindex="-1"><a class="header-anchor" href="#属性-2" aria-hidden="true">#</a> 属性：</h4><p>length：保存的数据项个数</p><h4 id="方法-1" tabindex="-1"><a class="header-anchor" href="#方法-1" aria-hidden="true">#</a> 方法：</h4><ul><li>setItem()：保存数据项，也可以直接赋值</li><li>getItem()：读取数据项</li><li>removeItem()：清除某个数据项</li><li>clear()：清空所有数据项</li><li>key()：接受一个整数作为参数，返回该位置对应的键值key</li></ul><h4 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件：</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>function onStorageChange(e) {\n  console.log(e.key);\n}\n\nwindow.addEventListener(&#39;storage&#39;, onStorageChange);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>StorageEvent.key</code>：字符串，表示发生变动的键名。如果 storage 事件是由<code>clear()</code>方法引起，该属性返回<code>null</code>。</li><li><code>StorageEvent.newValue</code>：字符串，表示新的键值。如果 storage 事件是由<code>clear()</code>方法或删除该键值对引发的，该属性返回<code>null</code>。</li><li><code>StorageEvent.oldValue</code>：字符串，表示旧的键值。如果该键值对是新增的，该属性返回<code>null</code>。</li><li><code>StorageEvent.storageArea</code>：对象，返回键值对所在的整个对象。也说是说，可以从这个属性上面拿到当前域名储存的所有键值对。</li><li><code>StorageEvent.url</code>：字符串，表示原始触发 storage 事件的那个网页的网址</li></ul><h2 id="history对象" tabindex="-1"><a class="header-anchor" href="#history对象" aria-hidden="true">#</a> History对象</h2>',12),ba={href:"https://wangdoc.com/javascript/bom/history.html",target:"_blank",rel:"noopener noreferrer"},fa=(0,n.Uk)("history对象"),ga=(0,n.Wm)("h2",{id:"location、url、urlsearchparams对象",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#location、url、urlsearchparams对象","aria-hidden":"true"},"#"),(0,n.Uk)(" Location、URL、URLSearchParams对象")],-1),ka={href:"https://wangdoc.com/javascript/bom/location.html",target:"_blank",rel:"noopener noreferrer"},xa=(0,n.Uk)("url"),Wa=(0,n.Wm)("h2",{id:"file对象",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#file对象","aria-hidden":"true"},"#"),(0,n.Uk)(" File对象")],-1),va={href:"https://wangdoc.com/javascript/bom/file.html",target:"_blank",rel:"noopener noreferrer"},wa=(0,n.Uk)("file对象"),Sa=(0,n.Wm)("h2",{id:"formdata对象",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#formdata对象","aria-hidden":"true"},"#"),(0,n.Uk)(" FormData对象")],-1),Ca={href:"https://wangdoc.com/javascript/bom/form.html",target:"_blank",rel:"noopener noreferrer"},Ua=(0,n.Uk)("form"),_a=(0,n.Wm)("h2",{id:"indexeddb",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#indexeddb","aria-hidden":"true"},"#"),(0,n.Uk)(" indexedDB")],-1),ya={href:"https://wangdoc.com/javascript/bom/indexeddb.html",target:"_blank",rel:"noopener noreferrer"},za=(0,n.Uk)("indexedDB"),Na=(0,n.uE)('<h2 id="web-worker" tabindex="-1"><a class="header-anchor" href="#web-worker" aria-hidden="true">#</a> Web Worker</h2><h3 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点" aria-hidden="true">#</a> 注意点：</h3><ol><li><h6 id="同源限制" tabindex="-1"><a class="header-anchor" href="#同源限制" aria-hidden="true">#</a> 同源限制</h6><p>分配给Worker线程运行的脚本文件，必须与主线程的脚本文件同源</p></li><li><h6 id="dom限制" tabindex="-1"><a class="header-anchor" href="#dom限制" aria-hidden="true">#</a> DOM限制</h6><p>Worker线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的DOM对象，也无法使用<code>document</code>、<code>window</code>、<code>parant</code>这些对象，但是可以使用<code>navigator</code>、<code>Location</code></p></li><li><h6 id="全局对象限制" tabindex="-1"><a class="header-anchor" href="#全局对象限制" aria-hidden="true">#</a> 全局对象限制</h6><p>同上</p></li><li><h6 id="通信联系" tabindex="-1"><a class="header-anchor" href="#通信联系" aria-hidden="true">#</a> 通信联系</h6><p>Worker线程和主线程不在同一个上下文环境，他们不能直接通信，必须通过消息完成</p></li><li><h6 id="脚本限制" tabindex="-1"><a class="header-anchor" href="#脚本限制" aria-hidden="true">#</a> 脚本限制</h6><p>Worker线程不能执行<code>alert()</code>、<code>conform()</code>方法，但是可以使用<code>xhr</code>发Ajax请求</p></li><li><h6 id="文件限制" tabindex="-1"><a class="header-anchor" href="#文件限制" aria-hidden="true">#</a> 文件限制</h6><p>Worker线程无法读取本地文件，即不能打开本地的文件系统，只能加载网络的资源</p></li></ol><h2 id="开发者工具" tabindex="-1"><a class="header-anchor" href="#开发者工具" aria-hidden="true">#</a> 开发者工具</h2><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Elements</td><td>可以查看DOM结构，编辑CSS样式，用于测试页面布局和设计页面</td></tr><tr><td>Console</td><td>可以看作JavaScript Shell，能执行js脚本，还可以通过Console和页面中的js对象交互</td></tr><tr><td>Sources</td><td>1. 查看Web应用加载的所有文件<br>2. 编辑CSS和JavaScript的文件内容<br>3. 将打乱的CSS文件和JavaScript文件格式化<br>4. 支持JavaScript的调试功能<br>5. 设置工作区，将更改的文件保存到本地文件夹中</td></tr><tr><td>NetWork</td><td>展示了页面中所有的请求内容列表，能查看每项请求的请求行、请求头、请求体、时间线以及网络请求瀑布图等信息</td></tr><tr><td>Performance</td><td>记录和查看Web应用生命周期内的各种事件，并用来分析在执行过程中一些影响性能的要点</td></tr><tr><td>Memory</td><td>用来查看运行过程中的JavaScript占用堆内存情况，追踪是否存在内存泄漏的情况等</td></tr><tr><td>Application</td><td>查看Web应用的数据存储情况：<br>PWA的基础数据、IndexedDB、Web SQL、本地和会话存储、Cookie、应用程序缓存、图像、字体和样式表等等</td></tr><tr><td>Security</td><td>显示当前页面一些基础的安全信息</td></tr><tr><td>Audits</td><td>会对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议</td></tr><tr><td>Layers</td><td>展示一些渲染过程中分层的基础信息</td></tr></tbody></table><p>简单来说，chrome开发者工具为我们提供了通过页面访问或者编辑DOM和CSSOM的能力，还提供了强大的调试功能和查看性能指标的能力</p>',6),Ma={render:function(e,a){const l=(0,n.up)("OutboundLink");return(0,n.wg)(),(0,n.j4)(n.HY,null,[r,(0,n.Wm)("p",null,[(0,n.Wm)("a",i,[o,(0,n.Wm)(l)])]),t,(0,n.Wm)("ul",null,[d,(0,n.Wm)("li",null,[(0,n.Wm)("p",null,[(0,n.Wm)("a",s,[c,(0,n.Wm)(l)]),h,p,u,m,b,(0,n.Wm)("a",f,[g,(0,n.Wm)(l)]),k,x,W])]),(0,n.Wm)("li",null,[(0,n.Wm)("p",null,[(0,n.Wm)("a",v,[w,(0,n.Wm)(l)]),S,C,U,_,y])]),(0,n.Wm)("li",null,[(0,n.Wm)("p",null,[z,(0,n.Wm)("a",N,[M,(0,n.Wm)(l)]),j,(0,n.Wm)("a",T,[L,(0,n.Wm)(l)]),O,E,J])]),(0,n.Wm)("li",null,[(0,n.Wm)("p",null,[P,(0,n.Wm)("a",D,[H,(0,n.Wm)(l)]),B,(0,n.Wm)("a",I,[A,(0,n.Wm)(l)]),q,R,F])]),(0,n.Wm)("li",null,[(0,n.Wm)("p",null,[(0,n.Wm)("a",X,[V,(0,n.Wm)(l)]),Y,Q,G,(0,n.Wm)("a",K,[Z,(0,n.Wm)(l)]),$])]),(0,n.Wm)("li",null,[(0,n.Wm)("p",null,[(0,n.Wm)("a",ee,[ae,(0,n.Wm)(l)]),le,ne,re])]),ie]),oe,(0,n.Wm)("ul",null,[(0,n.Wm)("li",null,[(0,n.Wm)("p",null,[(0,n.Wm)("a",te,[de,(0,n.Wm)(l)])])]),(0,n.Wm)("li",null,[(0,n.Wm)("p",null,[(0,n.Wm)("a",se,[ce,(0,n.Wm)(l)])])]),(0,n.Wm)("li",null,[(0,n.Wm)("p",null,[(0,n.Wm)("a",he,[pe,(0,n.Wm)(l)])])]),(0,n.Wm)("li",null,[(0,n.Wm)("p",null,[(0,n.Wm)("a",ue,[me,(0,n.Wm)(l)])])]),(0,n.Wm)("li",null,[(0,n.Wm)("p",null,[(0,n.Wm)("a",be,[fe,(0,n.Wm)(l)]),ge,(0,n.Wm)("a",ke,[xe,(0,n.Wm)(l)]),We,(0,n.Wm)("a",ve,[we,(0,n.Wm)(l)])])]),(0,n.Wm)("li",null,[(0,n.Wm)("p",null,[(0,n.Wm)("a",Se,[Ce,(0,n.Wm)(l)]),Ue,_e,ye])]),(0,n.Wm)("li",null,[(0,n.Wm)("p",null,[(0,n.Wm)("a",ze,[Ne,(0,n.Wm)(l)]),Me,je,Te])]),(0,n.Wm)("li",null,[(0,n.Wm)("p",null,[(0,n.Wm)("a",Le,[Oe,(0,n.Wm)(l)]),Ee,(0,n.Wm)("a",Je,[Pe,(0,n.Wm)(l)]),De])]),(0,n.Wm)("li",null,[(0,n.Wm)("p",null,[(0,n.Wm)("a",He,[Be,(0,n.Wm)(l)]),Ie,Ae,qe,Re,Fe,Xe,Ve,Ye,Qe])])]),Ge,(0,n.Wm)("p",null,[Ke,(0,n.Wm)("a",Ze,[$e,(0,n.Wm)(l)])]),ea,(0,n.Wm)("p",null,[(0,n.Wm)("a",aa,[la,(0,n.Wm)(l)])]),na,(0,n.Wm)("p",null,[(0,n.Wm)("a",ra,[ia,(0,n.Wm)(l)])]),oa,(0,n.Wm)("p",null,[(0,n.Wm)("a",ta,[da,(0,n.Wm)(l)])]),sa,(0,n.Wm)("ol",null,[ca,(0,n.Wm)("li",null,[ha,(0,n.Wm)("p",null,[(0,n.Wm)("a",pa,[ua,(0,n.Wm)(l)])])])]),ma,(0,n.Wm)("p",null,[(0,n.Wm)("a",ba,[fa,(0,n.Wm)(l)])]),ga,(0,n.Wm)("p",null,[(0,n.Wm)("a",ka,[xa,(0,n.Wm)(l)])]),Wa,(0,n.Wm)("p",null,[(0,n.Wm)("a",va,[wa,(0,n.Wm)(l)])]),Sa,(0,n.Wm)("p",null,[(0,n.Wm)("a",Ca,[Ua,(0,n.Wm)(l)])]),_a,(0,n.Wm)("p",null,[(0,n.Wm)("a",ya,[za,(0,n.Wm)(l)])]),Na],64)}}}}]);