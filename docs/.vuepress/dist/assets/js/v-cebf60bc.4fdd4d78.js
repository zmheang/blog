"use strict";(self.webpackChunkdocument_web_site=self.webpackChunkdocument_web_site||[]).push([[89],{4186:(e,a,t)=>{t.r(a),t.d(a,{data:()=>n});const n={key:"v-cebf60bc",path:"/relearn/12-js/knowledge/",title:"关于JavaScript的N个概念",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1.   Call Stack --- 调用堆栈",slug:"_1-call-stack-调用堆栈",children:[]},{level:2,title:"2.   Primitive Types",slug:"_2-primitive-types",children:[]},{level:2,title:"3.   Value Types and Reference Types",slug:"_3-value-types-and-reference-types",children:[]},{level:2,title:"4.   Implicit, Explicit, Nominal, Structuring and Duck Typing",slug:"_4-implicit-explicit-nominal-structuring-and-duck-typing",children:[]},{level:2,title:"5.   == vs === vs typeof",slug:"_5-vs-vs-typeof",children:[]},{level:2,title:"6.   Function Scope, Block Scope and Lexical Scope",slug:"_6-function-scope-block-scope-and-lexical-scope",children:[]},{level:2,title:"7.   Expression vs Statement",slug:"_7-expression-vs-statement",children:[]},{level:2,title:"8.   IIFE, Modules and Namespaces",slug:"_8-iife-modules-and-namespaces",children:[]},{level:2,title:"9.   Message Queue and. Event Loop",slug:"_9-message-queue-and-event-loop",children:[]},{level:2,title:"10. setTimeout, setInterval and requestAnimationFrame",slug:"_10-settimeout-setinterval-and-requestanimationframe",children:[]},{level:2,title:"11. JavaScript Engines",slug:"_11-javascript-engines",children:[]},{level:2,title:"12. Bitwise Operators, Type Arrats and Array Buffers",slug:"_12-bitwise-operators-type-arrats-and-array-buffers",children:[]},{level:2,title:"13. DOM and Layout Trees",slug:"_13-dom-and-layout-trees",children:[]},{level:2,title:"14. Factories and Classes",slug:"_14-factories-and-classes",children:[]},{level:2,title:"15. this, call, apply and bind",slug:"_15-this-call-apply-and-bind",children:[]},{level:2,title:"16. new, Constructor, instance and Instances",slug:"_16-new-constructor-instance-and-instances",children:[]},{level:2,title:"17. Prototype Inheritance and Prototype Chain",slug:"_17-prototype-inheritance-and-prototype-chain",children:[]},{level:2,title:"18. Object.create and Object.assign",slug:"_18-object-create-and-object-assign",children:[]},{level:2,title:"19. map, reduce, filter",slug:"_19-map-reduce-filter",children:[]},{level:2,title:"20. Pure Function, Side Effects and State Mutation",slug:"_20-pure-function-side-effects-and-state-mutation",children:[]},{level:2,title:"21. Closures",slug:"_21-closures",children:[]},{level:2,title:"22. High Order Functions",slug:"_22-high-order-functions",children:[]},{level:2,title:"23. Recursion",slug:"_23-recursion",children:[]},{level:2,title:"24. Collections and Generators",slug:"_24-collections-and-generators",children:[]},{level:2,title:"25. Promises",slug:"_25-promises",children:[]},{level:2,title:"26. async/await",slug:"_26-async-await",children:[]},{level:2,title:"27. Date Structures",slug:"_27-date-structures",children:[]},{level:2,title:"28. Expensive Operation and Big O Notation",slug:"_28-expensive-operation-and-big-o-notation",children:[]},{level:2,title:"29. Algortithms",slug:"_29-algortithms",children:[]},{level:2,title:"30. Inheritance, polymorphism and Code Reuse",slug:"_30-inheritance-polymorphism-and-code-reuse",children:[]},{level:2,title:"31. Design Patterns",slug:"_31-design-patterns",children:[]},{level:2,title:"32. Partial Applications, Currying, Compose and Pips",slug:"_32-partial-applications-currying-compose-and-pips",children:[]},{level:2,title:"33. Clean Code",slug:"_33-clean-code",children:[]}],filePathRelative:"relearn/12-js/knowledge/index.md"}},5167:(e,a,t)=>{t.r(a),t.d(a,{default:()=>g});var n=t(6252);const i=(0,n.Wm)("h1",{id:"关于javascript的n个概念",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#关于javascript的n个概念","aria-hidden":"true"},"#"),(0,n.Uk)(" 关于JavaScript的N个概念")],-1),r=(0,n.Wm)("p",null,"[TOC]",-1),s=(0,n.Wm)("hr",null,null,-1),l=(0,n.Wm)("h2",{id:"_1-call-stack-调用堆栈",tabindex:"-1"},[(0,n.Wm)("a",{class:"header-anchor",href:"#_1-call-stack-调用堆栈","aria-hidden":"true"},"#"),(0,n.Uk)(" 1. Call Stack --- 调用堆栈")],-1),d=(0,n.Wm)("p",null,"堆：当",-1),c=(0,n.Wm)("p",null,"聊到堆栈，那就得了解",-1),o=(0,n.Wm)("p",null,"参考资料：",-1),h={href:"https://web.archive.org/web/20130225162302/http://www.cs.umd.edu/class/sum2003/cmsc311/Notes/Mips/stack.html",target:"_blank",rel:"noopener noreferrer"},u=(0,n.Uk)("理解堆栈"),p=(0,n.uE)('<h2 id="_2-primitive-types" tabindex="-1"><a class="header-anchor" href="#_2-primitive-types" aria-hidden="true">#</a> 2. Primitive Types</h2><h2 id="_3-value-types-and-reference-types" tabindex="-1"><a class="header-anchor" href="#_3-value-types-and-reference-types" aria-hidden="true">#</a> 3. Value Types and Reference Types</h2><h2 id="_4-implicit-explicit-nominal-structuring-and-duck-typing" tabindex="-1"><a class="header-anchor" href="#_4-implicit-explicit-nominal-structuring-and-duck-typing" aria-hidden="true">#</a> 4. Implicit, Explicit, Nominal, Structuring and Duck Typing</h2><h2 id="_5-vs-vs-typeof" tabindex="-1"><a class="header-anchor" href="#_5-vs-vs-typeof" aria-hidden="true">#</a> 5. == vs === vs typeof</h2><h2 id="_6-function-scope-block-scope-and-lexical-scope" tabindex="-1"><a class="header-anchor" href="#_6-function-scope-block-scope-and-lexical-scope" aria-hidden="true">#</a> 6. Function Scope, Block Scope and Lexical Scope</h2><h2 id="_7-expression-vs-statement" tabindex="-1"><a class="header-anchor" href="#_7-expression-vs-statement" aria-hidden="true">#</a> 7. Expression vs Statement</h2><h2 id="_8-iife-modules-and-namespaces" tabindex="-1"><a class="header-anchor" href="#_8-iife-modules-and-namespaces" aria-hidden="true">#</a> 8. IIFE, Modules and Namespaces</h2><h2 id="_9-message-queue-and-event-loop" tabindex="-1"><a class="header-anchor" href="#_9-message-queue-and-event-loop" aria-hidden="true">#</a> 9. Message Queue and. Event Loop</h2><h2 id="_10-settimeout-setinterval-and-requestanimationframe" tabindex="-1"><a class="header-anchor" href="#_10-settimeout-setinterval-and-requestanimationframe" aria-hidden="true">#</a> 10. setTimeout, setInterval and requestAnimationFrame</h2><h2 id="_11-javascript-engines" tabindex="-1"><a class="header-anchor" href="#_11-javascript-engines" aria-hidden="true">#</a> 11. JavaScript Engines</h2><h2 id="_12-bitwise-operators-type-arrats-and-array-buffers" tabindex="-1"><a class="header-anchor" href="#_12-bitwise-operators-type-arrats-and-array-buffers" aria-hidden="true">#</a> 12. Bitwise Operators, Type Arrats and Array Buffers</h2><h2 id="_13-dom-and-layout-trees" tabindex="-1"><a class="header-anchor" href="#_13-dom-and-layout-trees" aria-hidden="true">#</a> 13. DOM and Layout Trees</h2><h2 id="_14-factories-and-classes" tabindex="-1"><a class="header-anchor" href="#_14-factories-and-classes" aria-hidden="true">#</a> 14. Factories and Classes</h2><h2 id="_15-this-call-apply-and-bind" tabindex="-1"><a class="header-anchor" href="#_15-this-call-apply-and-bind" aria-hidden="true">#</a> 15. this, call, apply and bind</h2><h2 id="_16-new-constructor-instance-and-instances" tabindex="-1"><a class="header-anchor" href="#_16-new-constructor-instance-and-instances" aria-hidden="true">#</a> 16. new, Constructor, instance and Instances</h2><h2 id="_17-prototype-inheritance-and-prototype-chain" tabindex="-1"><a class="header-anchor" href="#_17-prototype-inheritance-and-prototype-chain" aria-hidden="true">#</a> 17. Prototype Inheritance and Prototype Chain</h2><h2 id="_18-object-create-and-object-assign" tabindex="-1"><a class="header-anchor" href="#_18-object-create-and-object-assign" aria-hidden="true">#</a> 18. Object.create and Object.assign</h2><h2 id="_19-map-reduce-filter" tabindex="-1"><a class="header-anchor" href="#_19-map-reduce-filter" aria-hidden="true">#</a> 19. map, reduce, filter</h2><h2 id="_20-pure-function-side-effects-and-state-mutation" tabindex="-1"><a class="header-anchor" href="#_20-pure-function-side-effects-and-state-mutation" aria-hidden="true">#</a> 20. Pure Function, Side Effects and State Mutation</h2><h2 id="_21-closures" tabindex="-1"><a class="header-anchor" href="#_21-closures" aria-hidden="true">#</a> 21. Closures</h2><h2 id="_22-high-order-functions" tabindex="-1"><a class="header-anchor" href="#_22-high-order-functions" aria-hidden="true">#</a> 22. High Order Functions</h2><h2 id="_23-recursion" tabindex="-1"><a class="header-anchor" href="#_23-recursion" aria-hidden="true">#</a> 23. Recursion</h2><h2 id="_24-collections-and-generators" tabindex="-1"><a class="header-anchor" href="#_24-collections-and-generators" aria-hidden="true">#</a> 24. Collections and Generators</h2><h2 id="_25-promises" tabindex="-1"><a class="header-anchor" href="#_25-promises" aria-hidden="true">#</a> 25. Promises</h2><h2 id="_26-async-await" tabindex="-1"><a class="header-anchor" href="#_26-async-await" aria-hidden="true">#</a> 26. async/await</h2><h2 id="_27-date-structures" tabindex="-1"><a class="header-anchor" href="#_27-date-structures" aria-hidden="true">#</a> 27. Date Structures</h2><h2 id="_28-expensive-operation-and-big-o-notation" tabindex="-1"><a class="header-anchor" href="#_28-expensive-operation-and-big-o-notation" aria-hidden="true">#</a> 28. Expensive Operation and Big O Notation</h2><h2 id="_29-algortithms" tabindex="-1"><a class="header-anchor" href="#_29-algortithms" aria-hidden="true">#</a> 29. Algortithms</h2><h2 id="_30-inheritance-polymorphism-and-code-reuse" tabindex="-1"><a class="header-anchor" href="#_30-inheritance-polymorphism-and-code-reuse" aria-hidden="true">#</a> 30. Inheritance, polymorphism and Code Reuse</h2><h2 id="_31-design-patterns" tabindex="-1"><a class="header-anchor" href="#_31-design-patterns" aria-hidden="true">#</a> 31. Design Patterns</h2><h2 id="_32-partial-applications-currying-compose-and-pips" tabindex="-1"><a class="header-anchor" href="#_32-partial-applications-currying-compose-and-pips" aria-hidden="true">#</a> 32. Partial Applications, Currying, Compose and Pips</h2><h2 id="_33-clean-code" tabindex="-1"><a class="header-anchor" href="#_33-clean-code" aria-hidden="true">#</a> 33. Clean Code</h2><p><code>参考资料：</code></p>',33),m={href:"https://github.com/leonardomso/33-js-concepts",target:"_blank",rel:"noopener noreferrer"},_=(0,n.Uk)("33-js-concepts"),f=(0,n.Wm)("li",null,"resource-002-xxxxxxxx",-1),g={render:function(e,a){const t=(0,n.up)("OutboundLink");return(0,n.wg)(),(0,n.j4)(n.HY,null,[i,r,s,l,d,c,o,(0,n.Wm)("p",null,[(0,n.Wm)("a",h,[u,(0,n.Wm)(t)])]),p,(0,n.Wm)("ol",null,[(0,n.Wm)("li",null,[(0,n.Wm)("a",m,[_,(0,n.Wm)(t)])]),f])],64)}}}}]);